
import numpy as np
import matplotlib.pyplot as plt

# Константы
h_bar = 1.0545718e-34  # Постоянная Планка, в Дж * с
m_e = 9.10938356e-31  # Масса электрона, в кг
c = 299792458  # Скорость света, в м/с

# Параметры кристалла
a = 5e-10  # Расстояние между атомами в кристалле, в м
V0 = 1  # Глубина потенциальной ямы, в эВ

# Входные параметры
E = 1.5  # Энергия электрона, в эВ
theta = np.pi / 4  # Угол падения на цепочку, в радианах
b = 1e-10  # Прицельный параметр, в м

# Функция модифицированного потенциала Линдхарда
def modified_lindhard_potential(x):
    return V0 / np.cosh(x / a)**2

# Алгоритм Верле в скоростной форме
def verlet_integration(x, y, vx, vy, dt):
    ax = - (2 * modified_lindhard_potential(x) / (m_e * c**2)) * vx / np.sqrt(1 - (vx / c)**2)
    ay = - (2 * modified_lindhard_potential(x) / (m_e * c**2)) * vy / np.sqrt(1 - (vx / c)**2)
    
    x += vx * dt + 0.5 * ax * dt**2
    y += vy * dt + 0.5 * ay * dt**2
    
    ax_new = - (2 * modified_lindhard_potential(x) / (m_e * c**2)) * vx / np.sqrt(1 - (vx / c)**2)
    ay_new = - (2 * modified_lindhard_potential(x) / (m_e * c**2)) * vy / np.sqrt(1 - (vx / c)**2)
    
    vx += 0.5 * (ax + ax_new) * dt
    vy += 0.5 * (ay + ay_new) * dt
    
    return x, y, vx, vy

# Моделирование движения
num_steps = 1000  # Количество шагов моделирования
dt = 1e-16  # Шаг интегрирования, в с

x = np.zeros(num_steps)
y = np.zeros(num_steps)
vx = np.zeros(num_steps)
vy = np.zeros(num_steps)

x[0] = -b / np.sin(theta)
y[0] = 0
vx[0] = np.sqrt(2 * E * 1.6e-19 / m_e) * np.cos(theta)
vy[0] = np.sqrt(2 * E * 1.6e-19 / m_e) * np.sin(theta)

for i in range(1, num_steps):
    x[i], y[i], vx[i], vy[i] = verlet_integration(x[i-1], y[i-1], vx[i-1], vy[i-1], dt)

# Вывод результатов
plt.plot(x, y)
plt.xlabel("x (м)")
plt.ylabel("y (м)")
plt.title("Траектория движения электрона")
plt.show()
