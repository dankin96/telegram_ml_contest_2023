#include <gtk/gtk.h>
#include <epoxy/gl.h>

static void on_realize(GtkGLArea *area);
static void on_render(GtkGLArea *area, GdkGLContext *context);

int main(int argc, char *argv[]) {
    gtk_init(&argc, &argv);

    GtkWidget *window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window), "OpenGL UV Triangle");

    GtkGLArea *area = GTK_GL_AREA(gtk_gl_area_new());
    g_signal_connect(area, "realize", G_CALLBACK(on_realize), NULL);
    g_signal_connect(area, "render", G_CALLBACK(on_render), NULL);

    gtk_container_add(GTK_CONTAINER(window), GTK_WIDGET(area));

    g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);

    gtk_widget_show_all(window);

    gtk_main();

    return 0;
}

GLuint shaderProgram;
GLuint vao;

static void on_realize(GtkGLArea *area) {
    gtk_gl_area_make_current(area);
    if (gtk_gl_area_get_error(area) != NULL) {
        return;
    }

    const char *vertexShaderSource = "#version 330 core
"
        "layout (location = 0) in vec3 aPos;
"
        "layout (location = 1) in vec2 aTexCoord;
"
        "out vec2 TexCoord;
"
        "void main()
"
        "{
"
        "   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
"
        "   TexCoord = vec2(aTexCoord.x, aTexCoord.y);
"
        "}\0";

    const char *fragmentShaderSource = "#version 330 core
"
        "out vec4 FragColor;
"
        "in vec2 TexCoord;
"
        "void main()
"
        "{
"
        "   FragColor = vec4(TexCoord.x, TexCoord.y, 0.0f, 1.0f);
"
        "}
\0";

    GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);

    GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);

    shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    float vertices[] = {
        // positions        // UV coords
        0.5f,  0.5f, 0.0f,  1.0f, 1.0f,
       -0.5f,  0.5f, 0.0f,  0.0f, 1.0f,
       -0.5f, -0.5f, 0.0f,  0.0f, 0.0f,

       -0.5f, -0.5f, 0.0f,  0.0f, 0.0f,
        0.5f, -0.5f, 0.0f,  1.0f, 0.0f,
        0.5f,  0.5f, 0.0f,  1.0f, 1.0f
    };

    GLuint vbo;
    glGenVertexArrays(1, &vao);
    glGenBuffers(1, &vbo);

    glBindVertexArray(vao);

    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
}

static void on_render(GtkGLArea *area, GdkGLContext *context) {
    glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    glUseProgram(shaderProgram);
    glBindVertexArray(vao);
    glDrawArrays(GL_TRIANGLES, 0, 6);
}