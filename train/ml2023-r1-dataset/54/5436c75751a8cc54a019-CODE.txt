{-# LANGUAGE BangPatterns #-}import System.Environmentlinspace :: Fractional a => a -> a -> Maybe Int -> [a]linspace start end maybe = linspace' [] 0 where stepCount = case maybe of Just i | i > 0 -> i | otherwise -> errorWithoutStackTrace "Number of steps must be > 0" Nothing -> 100 stepSize = abs $ (end - start) / (fromIntegral stepCount) linspace' !acc n | n > stepCount = acc | otherwise = let !el = start + stepSize * (fromIntegral n) in linspace' (acc ++ [el]) (n + 1)main = do argv <- getArgs let argc = length argv if argc /= 2 && argc /= 3 then errorWithoutStackTrace "linspace <start> <end> [steps]" else return () let start = read $ argv !! 0 :: Double end = read $ argv !! 1 :: Double steps = if argc == 3 then Just $ read (argv !! 2) :: Maybe Int else Nothing putStrLn . show $ linspace start end steps