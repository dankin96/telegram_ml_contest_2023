// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol"; // Importing OpenZeppelin's Ownable contract

contract CoreContract is Ownable {
    address private _core; // This will be the core address

    event CoreAddressChanged(address indexed previousCore, address indexed newCore);

    /**
     * @dev Sets the values for {_core}.
     *
     * All of these parameters are immutable: they can only be set once during
     * construction.
     */
    constructor(address core_) {
        _core = core_;
    }

    /**
     * @dev Returns the address of the current core.
     */
    function core() public view returns (address) {
        return _core;
    }

    /**
     * @dev Throws if called by any account other than the core.
     */
    modifier onlyCore() {
        require(core() == _msgSender(), "CoreContract: caller is not the core");
        _;
    }

    /**
     * @dev Leaves the contract without core. It will not be possible to call
     * `onlyCore` functions anymore. Can only be called by the current core.
     *
     * NOTE: Renouncing core will leave the contract without an core,
     * thereby removing any functionality that is only available to the core.
     */
    function renounceCore() public onlyCore {
        emit CoreAddressChanged(_core, address(0));
        _core = address(0);
    }

    /**
     * @dev Transfers core of the contract to a new account (`newCore`).
     * Can only be called by the current core.
     */
    function transferCore(address newCore) public onlyCore {
        require(newCore != address(0), "CoreContract: new core is the zero address");
        emit CoreAddressChanged(_core, newCore);
        _core = newCore;
    }
}
