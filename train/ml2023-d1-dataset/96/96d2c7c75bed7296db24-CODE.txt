import kotlinx.serialization.*
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

@Serializable
sealed class Test {
    @Serializable
    @SerialName("Test.Test1")
    data class Test1 constructor(val text: String) : Test() {
        @OptIn(ExperimentalSerializationApi::class)
        @Serializer(forClass = Test1::class)
        companion object : KSerializer<Test1> {
            override fun serialize(encoder: Encoder, value: Test1) = encoder.encodeString( "test")

            override val descriptor =
                PrimitiveSerialDescriptor("Test.Test1", PrimitiveKind.STRING)

            override fun deserialize(decoder: Decoder): Test1 {
                val deserialValue = decoder.decodeString()
                return Test1(deserialValue)
            }
        }
    }
}

