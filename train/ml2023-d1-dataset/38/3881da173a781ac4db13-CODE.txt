import base64, hmac, struct, sys, time
hotp = lambda key, counter, digits=6, digest='sha1': str(struct.unpack('>L', hmac.new(base64.b32decode(key.upper() + '=' * ((8 - len(key)) % 8)), struct.pack('>Q', counter), digest).digest()[-4:-1] + bytes([hmac.new(base64.b32decode(key.upper() + '=' * ((8 - len(key)) % 8)), struct.pack('>Q', counter), digest).digest()[-1] & 0x0f]))[0] & 0x7fffffff)[-digits:].zfill(digits)
totp = lambda key, time_step=30, digits=6, digest='sha1': hotp(key, int(time.time() / time_step), digits, digest)
if __name__ == '__main__': print([totp(key.strip(), *(int(x) if x.isdigit() else x for x in sys.argv[1:])) for key in sys.stdin])