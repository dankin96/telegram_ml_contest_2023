import React, { useState } from 'react';
import { Editor, EditorState, RichUtils, CompositeDecorator, convertToRaw, convertFromRaw, ContentState } from 'draft-js';

const XVariable = (props) => {
  return <span className="custom-tag">{props.children}</span>;
};

const xVariableStrategy = (contentBlock, callback, contentState) => {
  contentBlock.findEntityRanges((character) => {
    const entityKey = character.getEntity();
    return entityKey !== null && contentState.getEntity(entityKey).getType() === 'XVARIABLE';
  }, callback);
};

const App = () => {
  const decorator = new CompositeDecorator([
    {
      strategy: xVariableStrategy,
      component: XVariable,
    },
  ]);

  const [editorState, setEditorState] = useState(EditorState.createEmpty(decorator));

  const handleXVariableClick = () => {
    const selection = editorState.getSelection();
    const contentState = editorState.getCurrentContent();

    const contentStateWithEntity = contentState.createEntity('XVARIABLE', 'IMMUTABLE', {});
    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();
    const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity });

    setEditorState(RichUtils.toggleLink(newEditorState, selection, entityKey));
  };

  const handleEditorChange = (state) => {
    const raw = convertToRaw(state.getCurrentContent());
    console.log(raw);
    setEditorState(state);
  };

  const handleLoadContent = () => {
    const content = {
      entityMap: {},
      blocks: [
        {
          key: '1',
          text: 'This is a xvariable example',
          type: 'unstyled',
          entityRanges: [
            {
              offset: 10,
              length: 9,
              key: 0,
            },
          ],
        },
      ],
    };
    const contentState = convertFromRaw(content);
    const newEditorState = EditorState.createWithContent(contentState, decorator);
    setEditorState(newEditorState);
  };

  return (
    <div className="editor-container">
      <button onClick={handleXVariableClick}>Add XVariable</button>
      <button onClick={handleLoadContent}>Load Content</button>
      <Editor editorState={editorState} onChange={handleEditorChange} />
    </div>
  );
};

export default App;


